{"version":3,"file":"plugin.js","sources":["../../../vite/plugin.js"],"sourcesContent":["import pick from \"lodash/pick\";\r\nimport { resolveConfig } from \"../config\";\r\n\r\nimport {\r\n  createServer as createViteDevServer,\r\n} from \"vite\";\r\n\r\nconst supportedRemixVueConfigKeys = [\r\n  \"appDirectory\",\r\n  \"assetsBuildDirectory\",\r\n  \"future\",\r\n  \"ignoredRouteFiles\",\r\n  \"publicPath\",\r\n  \"routes\",\r\n  \"serverBuildPath\",\r\n  \"serverModuleFormat\",\r\n];\r\n\r\nexport const remixVueVitePlugin = (options = {}) => {\r\n  let viteCommand;\r\n  let viteUserConfig;\r\n\r\n  let cssModulesManifest = {};\r\n  let ssrBuildContext;\r\n\r\n  let viteChildCompiler;\r\n\r\n  let resolvePluginConfig = async () => {\r\n    let rootDirectory =\r\n      viteUserConfig.root ?? process.env.REMIX_ROOT ?? process.cwd();\r\n\r\n    let serverMode = viteUserConfig.serverMode ?? \"development\";\r\n\r\n    // Avoid leaking any config options that the Vite plugin doesn't support\r\n    let config = pick(options, supportedRemixVueConfigKeys);\r\n\r\n    // Only select the Remix config options that the Vite plugin uses\r\n    let {\r\n      appDirectory,\r\n      assetsBuildDirectory,\r\n      entryClientFilePath,\r\n      publicPath,\r\n      routes,\r\n      entryServerFilePath,\r\n      serverBuildPath,\r\n      serverModuleFormat,\r\n      relativeAssetsBuildDirectory,\r\n    } = await resolveConfig(config, { rootDirectory, serverMode });\r\n\r\n    return {\r\n      appDirectory,\r\n      rootDirectory,\r\n      assetsBuildDirectory,\r\n      entryClientFilePath,\r\n      publicPath,\r\n      routes,\r\n      entryServerFilePath,\r\n      serverBuildPath,\r\n      serverModuleFormat,\r\n      relativeAssetsBuildDirectory,\r\n      future: {\r\n        v3_fetcherPersist: options.future?.v3_fetcherPersist === true,\r\n      },\r\n    };\r\n  };\r\n\r\n  let getServerEntry = async () => {\r\n    let pluginConfig = await resolvePluginConfig();\r\n\r\n    return `\r\n      import * as entryServer from ${JSON.stringify(\r\n        resolveFileUrl(pluginConfig, pluginConfig.entryServerFilePath)\r\n      )};\r\n      ${Object.keys(pluginConfig.routes)\r\n        .map((key, index) => {\r\n          let route = pluginConfig.routes[key];\r\n          return `import * as route${index} from ${JSON.stringify(\r\n            resolveFileUrl(\r\n              pluginConfig,\r\n              resolveRelativeRouteFilePath(route, pluginConfig)\r\n            )\r\n          )};`;\r\n        })\r\n        .join(\"\\n\")}\r\n        export { default as assets } from ${JSON.stringify(serverManifestId)};\r\n        export const assetsBuildDirectory = ${JSON.stringify(\r\n          pluginConfig.relativeAssetsBuildDirectory\r\n        )};\r\n        ${\r\n          pluginConfig.future\r\n            ? `export const future = ${JSON.stringify(pluginConfig.future)}`\r\n            : \"\"\r\n        };\r\n        export const publicPath = ${JSON.stringify(pluginConfig.publicPath)};\r\n        export const entry = { module: entryServer };\r\n        export const routes = {\r\n          ${Object.keys(pluginConfig.routes)\r\n            .map((key, index) => {\r\n              let route = pluginConfig.routes[key];\r\n              return `${JSON.stringify(key)}: {\r\n            id: ${JSON.stringify(route.id)},\r\n            parentId: ${JSON.stringify(route.parentId)},\r\n            path: ${JSON.stringify(route.path)},\r\n            index: ${JSON.stringify(route.index)},\r\n            caseSensitive: ${JSON.stringify(route.caseSensitive)},\r\n            module: route${index}\r\n          }`;\r\n            })\r\n            .join(\",\\n  \")}\r\n        };`;\r\n  };\r\n\r\n  let createBuildManifest = async () => {\r\n    let pluginConfig = await resolvePluginConfig();\r\n    let viteManifest = JSON.parse(\r\n      await fs.readFile(\r\n        path.resolve(pluginConfig.assetsBuildDirectory, \"manifest.json\"),\r\n        \"utf-8\"\r\n      )\r\n    );\r\n\r\n    let entry = resolveBuildAssetPaths(\r\n      pluginConfig,\r\n      viteManifest,\r\n      pluginConfig.entryClientFilePath\r\n    );\r\n\r\n    let routes = {};\r\n    for (let [key, route] of Object.entries(pluginConfig.routes)) {\r\n      let routeFilePath = path.join(pluginConfig.appDirectory, route.file);\r\n      let sourceExports = await getRouteModuleExports(\r\n        viteChildCompiler,\r\n        pluginConfig,\r\n        route.file\r\n      );\r\n\r\n      routes[key] = {\r\n        id: route.id,\r\n        parentId: route.parentId,\r\n        path: route.path,\r\n        index: route.index,\r\n        caseSensitive: route.caseSensitive,\r\n        hasAction: sourceExports.includes(\"action\"),\r\n        hasLoader: sourceExports.includes(\"loader\"),\r\n        hasErrorBoundary: sourceExports.includes(\"ErrorBoundary\"),\r\n        ...resolveBuildAssetPaths(pluginConfig, viteManifest, routeFilePath),\r\n      };\r\n    }\r\n\r\n    let fingerprintedValues = { entry, routes };\r\n    let version = getHash(JSON.stringify(fingerprintedValues), 8);\r\n    let manifestFilename = `manifest-${version}.js`;\r\n    let url = `${pluginConfig.publicPath}${manifestFilename}`;\r\n    let nonFingerprintedValues = { url, version };\r\n\r\n    let manifest = {\r\n      ...fingerprintedValues,\r\n      ...nonFingerprintedValues,\r\n    };\r\n\r\n    await writeFileSafe(\r\n      path.join(pluginConfig.assetsBuildDirectory, manifestFilename),\r\n      `window.__remixManifest=${JSON.stringify(manifest)};`\r\n    );\r\n\r\n    return manifest;\r\n  };\r\n\r\n  let getDevManifest = async () => {\r\n    let pluginConfig = await resolvePluginConfig();\r\n    let routes = {};\r\n\r\n    for (let [key, route] of Object.entries(pluginConfig.routes)) {\r\n      let sourceExports = await getRouteModuleExports(\r\n        viteChildCompiler,\r\n        pluginConfig,\r\n        route.file\r\n      );\r\n\r\n      routes[key] = {\r\n        id: route.id,\r\n        parentId: route.parentId,\r\n        path: route.path,\r\n        index: route.index,\r\n        caseSensitive: route.caseSensitive,\r\n        module: `${resolveFileUrl(\r\n          pluginConfig,\r\n          resolveRelativeRouteFilePath(route, pluginConfig)\r\n        )}${\r\n          isJsFile(route.file) ? \"\" : \"?import\" // Ensure the Vite dev server responds with a JS module\r\n        }`,\r\n        hasAction: sourceExports.includes(\"action\"),\r\n        hasLoader: sourceExports.includes(\"loader\"),\r\n        hasErrorBoundary: sourceExports.includes(\"ErrorBoundary\"),\r\n        imports: [],\r\n      };\r\n    }\r\n\r\n    return {\r\n      version: String(Math.random()),\r\n      url: VirtualModule.url(browserManifestId),\r\n      entry: {\r\n        module: resolveFileUrl(pluginConfig, pluginConfig.entryClientFilePath),\r\n        imports: [],\r\n      },\r\n      routes,\r\n    };\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: \"remix-vue\",\r\n      config: async (_viteUserConfig, viteConfigEnv) => {\r\n        viteUserConfig = _viteUserConfig;\r\n        viteCommand = viteConfigEnv.command;\r\n\r\n        let pluginConfig = await resolvePluginConfig();\r\n\r\n        return {\r\n          appType: \"custom\",\r\n          experimental: { hmrPartialAccept: true },\r\n          optimizeDeps: {\r\n            include: [\"vue\"],\r\n          },\r\n          resolve: {\r\n            dedupe: [\"vue\"],\r\n          },\r\n          ...(viteCommand === \"build\" && {\r\n            base: pluginConfig.publicPath,\r\n            build: {\r\n              ...viteUserConfig.build,\r\n              ...(!viteConfigEnv.ssrBuild\r\n                ? {\r\n                    manifest: true,\r\n                    outDir: pluginConfig.assetsBuildDirectory,\r\n                    rollupOptions: {\r\n                      ...viteUserConfig.build?.rollupOptions,\r\n                      preserveEntrySignatures: \"exports-only\",\r\n                      input: [\r\n                        pluginConfig.entryClientFilePath,\r\n                        ...Object.values(pluginConfig.routes).map((route) =>\r\n                          path.resolve(pluginConfig.appDirectory, route.file)\r\n                        ),\r\n                      ],\r\n                    },\r\n                  }\r\n                : {\r\n                    outDir: path.dirname(pluginConfig.serverBuildPath),\r\n                    rollupOptions: {\r\n                      ...viteUserConfig.build?.rollupOptions,\r\n                      preserveEntrySignatures: \"exports-only\",\r\n                      input: serverEntryId,\r\n                      output: {\r\n                        entryFileNames: path.basename(\r\n                          pluginConfig.serverBuildPath\r\n                        ),\r\n                        format: pluginConfig.serverModuleFormat,\r\n                      },\r\n                    },\r\n                  }),\r\n            },\r\n          }),\r\n        };\r\n      },\r\n      // async configResolved(viteConfig) {\r\n      //   // await initEsModuleLexer;\r\n\r\n      //   viteChildCompiler = await createViteDevServer({\r\n      //     ...viteUserConfig,\r\n      //     server: {\r\n      //       ...viteUserConfig.server,\r\n      //       middlewareMode: false,\r\n      //     },\r\n      //     configFile: false,\r\n      //     envFile: false,\r\n      //     plugins: [\r\n      //       ...(viteUserConfig.plugins ?? [])\r\n      //         .flat()\r\n      //         .filter(\r\n      //           (plugin) =>\r\n      //             typeof plugin === \"object\" &&\r\n      //             plugin !== null &&\r\n      //             \"name\" in plugin &&\r\n      //             plugin.name !== \"remix\" &&\r\n      //             plugin.name !== \"remix-hmr-updates\"\r\n      //         ),\r\n      //       {\r\n      //         name: \"no-hmr\",\r\n      //         handleHotUpdate() {\r\n      //           return [];\r\n      //         },\r\n      //       },\r\n      //     ],\r\n      //   });\r\n      //   await viteChildCompiler.pluginContainer.buildStart({});\r\n\r\n      //   ssrBuildContext =\r\n      //     viteConfig.build.ssr && viteCommand === \"build\"\r\n      //       ? { isSsrBuild: true, getManifest: createBuildManifest }\r\n      //       : { isSsrBuild: false };\r\n      // },\r\n      // transform(code, id) {\r\n      //   if (isCssModulesFile(id)) {\r\n      //     cssModulesManifest[id] = code;\r\n      //   }\r\n      // },\r\n      // buildStart() {\r\n      //   if (viteCommand === \"build\") {\r\n      //     showUnstableWarning();\r\n      //   }\r\n      // },\r\n      // configureServer(vite) {\r\n      //   vite.httpServer?.on(\"listening\", () => {\r\n      //     setTimeout(showUnstableWarning, 50);\r\n      //   });\r\n      //   if (vite.config.server.middlewareMode) return;\r\n      //   return () => {\r\n      //     vite.middlewares.use(async (req, res, next) => {\r\n      //       try {\r\n      //         // Invalidate all virtual modules\r\n      //         vmods.forEach((vmod) => {\r\n      //           let mod = vite.moduleGraph.getModuleById(\r\n      //             VirtualModule.resolve(vmod)\r\n      //           );\r\n\r\n      //           if (mod) {\r\n      //             vite.moduleGraph.invalidateModule(mod);\r\n      //           }\r\n      //         });\r\n\r\n      //         let { url } = req;\r\n      //         let [pluginConfig, build] = await Promise.all([\r\n      //           resolvePluginConfig(),\r\n      //           vite.ssrLoadModule(serverEntryId),\r\n      //         ]);\r\n\r\n      //         let handle = createRequestHandler(build, {\r\n      //           mode: \"development\",\r\n      //           criticalCss: await getStylesForUrl(\r\n      //             vite,\r\n      //             pluginConfig,\r\n      //             cssModulesManifest,\r\n      //             build,\r\n      //             url\r\n      //           ),\r\n      //         });\r\n\r\n      //         await handle(req, res);\r\n      //       } catch (error) {\r\n      //         next(error);\r\n      //       }\r\n      //     });\r\n      //   };\r\n      // },\r\n      // async buildEnd() {\r\n      //   await viteChildCompiler?.close();\r\n      // },\r\n    },\r\n  ];\r\n};\r\n"],"names":["config","resolveConfig"],"mappings":"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AsB,MAAM,EAAE;AAC9B,wBAAwB,cAAc,EAAE,IAAI,CAAC,QAAQ;AACrD,0BAA0B,YAAY,CAAC,eAAe;AACtD,yBAAyB;AACzB,wBAAwB,MAAM,EAAE,YAAY,CAAC,kBAAkB;AAC/D,uBAAuB;AACvB,qBAAqB;AACrB,mBAAmB;AACnB,aAAa;AACb,WAAW;AACX,SAAS,CAAC;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG,CAAC;AACJ;;;;"}